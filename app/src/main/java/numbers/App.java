/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package numbers;

import java.io.IOException;
import java.net.ServerSocket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
    private static final Logger logger = LoggerFactory.getLogger(App.class);

    public static final int PORT = 4000;
    public static final int NUM_CONNECTIONS = 5;
    public static final int REPORT_SECONDS = 10;
    public static final Path NUMBERS_LOG_PATH = Paths.get("numbers.log");
    private static ScheduledExecutorService reportExecutor = Executors.newScheduledThreadPool(1);

    public static void main(String[] args) {
        NumberTracker tracker = new NumberTracker();

        startReporter(tracker);

        // Start the server
        ServerSocket serverSocket;
        try {
            serverSocket = new ServerSocket(PORT);
        } catch(IOException e) {
            logger.error("Server failed to connect to the port", e);
            return;
        }
        logger.info("Connected to port " + PORT);

        NumberServer server = null;
        try (NumberFileWriter fileWriter = new NumberFileWriter(NUMBERS_LOG_PATH)) {
            NumberListenerFactory listenerFactory = new NumberListenerFactory(serverSocket, tracker, fileWriter);
            server = new NumberServer(NUM_CONNECTIONS, listenerFactory);
            server.run();
        } catch (IOException e) {
            logger.error("Could not start file writer", e);
            System.exit(-1);
        } finally {
            if(server != null) {
                server.close();
            }
        }
        System.exit(0);
    }

    private static void startReporter(NumberTracker tracker) {
        Runnable reporter = new Runnable() {
            public void run() {
                Stats stats = tracker.resetStats();
                System.out.println(
                        String.format(
                                "Received %d unique numbers, %d duplicates. Unique total: %d",
                                stats.getNewUniques(),
                                stats.getNewDuplicates(),
                                stats.getTotalUniques()));
            }
        };
        reportExecutor.scheduleAtFixedRate(reporter, 0, REPORT_SECONDS, TimeUnit.SECONDS);
    }

    protected void finalize() {
        if(reportExecutor != null) {
            reportExecutor.shutdown();
        }
    }
}
